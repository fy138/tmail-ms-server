// Code generated by protoc-gen-go.
// source: tmail.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	tmail.proto

It has these top-level messages:
	SmtpResponseBase
	Helo
	MailFrom
*/
package main

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type SmtpResponseBase struct {
	SmtpCode         *int32  `protobuf:"varint,1,req,name=smtpCode" json:"smtpCode,omitempty"`
	SmtpMsg          *string `protobuf:"bytes,2,req,name=smtpMsg" json:"smtpMsg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SmtpResponseBase) Reset()         { *m = SmtpResponseBase{} }
func (m *SmtpResponseBase) String() string { return proto.CompactTextString(m) }
func (*SmtpResponseBase) ProtoMessage()    {}

func (m *SmtpResponseBase) GetSmtpCode() int32 {
	if m != nil && m.SmtpCode != nil {
		return *m.SmtpCode
	}
	return 0
}

func (m *SmtpResponseBase) GetSmtpMsg() string {
	if m != nil && m.SmtpMsg != nil {
		return *m.SmtpMsg
	}
	return ""
}

type Helo struct {
	Helo             *string `protobuf:"bytes,1,req,name=helo" json:"helo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Helo) Reset()         { *m = Helo{} }
func (m *Helo) String() string { return proto.CompactTextString(m) }
func (*Helo) ProtoMessage()    {}

func (m *Helo) GetHelo() string {
	if m != nil && m.Helo != nil {
		return *m.Helo
	}
	return ""
}

type MailFrom struct {
	MailFrom         *string `protobuf:"bytes,1,req,name=mailFrom" json:"mailFrom,omitempty"`
	RemoteHostIp     *string `protobuf:"bytes,2,opt,name=remoteHostIp" json:"remoteHostIp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MailFrom) Reset()         { *m = MailFrom{} }
func (m *MailFrom) String() string { return proto.CompactTextString(m) }
func (*MailFrom) ProtoMessage()    {}

func (m *MailFrom) GetMailFrom() string {
	if m != nil && m.MailFrom != nil {
		return *m.MailFrom
	}
	return ""
}

func (m *MailFrom) GetRemoteHostIp() string {
	if m != nil && m.RemoteHostIp != nil {
		return *m.RemoteHostIp
	}
	return ""
}

func init() {
}
